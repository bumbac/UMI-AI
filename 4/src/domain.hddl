(define (domain monkey-banana)

(:types room banana box - object)
(:predicates 
 (at-robby ?r - room)
 (at ?banana - banana ?r - room)
 (free)
 (up)
 (at ?box - box ?r - room))

(:task move_box
  :parameters (?box - box  ?from - room ?to - room) )
  
(:task take_banana
  :parameters (?banana - banana  ?from - room) )

(:task cleanup
  :parameters (?box - box  ?banana - banana ?boxpos - room ?bananapos - room ?monkeypos - room) )

(:task goto
  :parameters (?to - room) )
 
 (:method m0_move_box
  :parameters ( ?box - box ?from - room ?to - room)
  :task (move_box ?box ?from ?to)
  :precondition (and  (not (up)) (at ?box ?from) )
  :ordered-subtasks(and (t1 (goto ?from )) (t2 (push ?from ?to ?box ) )) )
  
(:method m1_take_banana
  :parameters ( ?banana - banana ?from - room ?box - box )
  :task (take_banana  ?banana ?from )
  :precondition (and  (not (up)) (free) (at ?box ?from) (at-robby ?from) (at ?banana ?from))
  :ordered-subtasks(and (t1 ( climbup ?from ?box )) (t2 (grasp ?from ?banana ?box )) ) )
 
(:method m4_cleanup
  :parameters ( ?box - box ?banana - banana ?boxpos - room ?bananapos - room ?monkeypos - room)
  :task (cleanup  ?box  ?banana ?boxpos ?bananapos ?monkeypos)
  :precondition (and  (up) (not (free)) (at ?box ?bananapos) (at-robby ?bananapos) (not (at ?banana ?bananapos)))
  :ordered-subtasks
   (and 
   (t1 (climbdown ?bananapos ?box )) (t2 (move ?bananapos ?monkeypos)) (t3 (ungrasp ?monkeypos ?banana))
   (t4 (move ?monkeypos ?bananapos)) (t5 (push ?bananapos ?boxpos ?box )) (t6 (move ?boxpos ?monkeypos))
   ))
 
 (:method m2_goto
  :parameters ( ?to - room )
  :task (goto ?to)
  :precondition (and (at-robby ?to))
  :ordered-subtasks(and (t1 (nop))) )
  
(:method m3_goto
  :parameters ( ?to - room ?from - room )
  :task (goto ?to)
  :precondition (and (at-robby ?from) (not (= ?from ?to)))
  :ordered-subtasks(and (t1 (move ?from ?to))) )   
   
 
(:action move
  :parameters (?from - room ?to - room)
  :precondition (and  (at-robby ?from) (not (up)))
  :effect (and (at-robby ?to) (not (at-robby ?from))))
  
(:action push
  :parameters (?from - room ?to - room ?box - box)
  :precondition (and (at-robby ?from) (at ?box ?from) (not (up)))
  :effect (and (not (at-robby ?from)) (at-robby ?to) (at ?box ?to) (not (at ?box ?from))))

(:action climbup
  :parameters (?from - room ?box - box)
  :precondition (and (not (up)) (at ?box ?from) (at-robby ?from))
  :effect (and (up)))
  
(:action climbdown
  :parameters (?from - room ?box - box)
  :precondition (and (up) (at ?box ?from) (at-robby ?from))
  :effect (and (not(up))))

(:action grasp
  :parameters (?from - room ?banana - banana ?box - box)
  :precondition (and (up) (at ?banana ?from) (at ?box ?from) (at-robby ?from))
  :effect (and (not (free)) (not (at ?banana ?from))))

(:action ungrasp
  :parameters (?from - room ?banana - banana)
  :precondition (and (at-robby ?from) (not(free)))
  :effect (and (free) (at ?banana ?from)))

(:action nop
  :parameters ()
  :precondition ()
  :effect ())
)
